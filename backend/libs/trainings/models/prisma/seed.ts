import { PrismaClient, Training } from '@prisma/client';
// eslint-disable-next-line @nx/enforce-module-boundaries
import {
  EntityConstrain,
  TRAINING_DURATIONS,
  TrainingLevel,
  TrainingType,
  UserGender,
} from '../../../shared/core/src';

function getRandomEnumValue<E>(enumObject: E): E[keyof E] {
  const values = Object.values(enumObject) as E[keyof E][];
  const randomIndex = Math.floor(Math.random() * values.length);
  return values[randomIndex];
}

function generateRandomDate(start: Date, end: Date) {
  const startTime = start.getTime();
  const endTime = end.getTime();
  const randomTime =
    Math.floor(Math.random() * (endTime - startTime + 1)) + startTime;

  return new Date(randomTime);
}

function getRandomValue(min: number, max: number, numAfterDigit = 0) {
  return +(Math.random() * (max - min) + min).toFixed(numAfterDigit);
}

function getRandomItem<T>(items: T[]): T {
  return items[getRandomValue(0, items.length - 1)];
}

const mockTrainingTitle = [
  '–í–∑—Ä—ã–≤',
  '–°—Ç–∞–ª—å–Ω–æ–π –ø—Ä–µ—Å—Å',
  '–ë–µ–≥',
  '–¢–∏—Ç–∞–Ω',
  '–ê—Ç–ª–∞–Ω—Ç',
  '–≠–Ω–µ—Ä–≥–∏—è+',
  '–î—Ä–∞–π–≤',
  '–ß–µ–º–ø–∏–æ–Ω',
  '–°–∏–ª–∞',
  '–¢—É—Ä–±–æ',
  '–ü—Ä–æ—Ä—ã–≤',
  '–¢–∏—Ç–∞–Ω-X',
  '–°–ø–∞—Ä—Ç–∞',
  '–§–µ–Ω–∏–∫—Å',
  '–û–ª–∏–º–ø',
];

const mockTrainerName = [
  '–í–∏–∫—Ç–æ—Ä–°–∏–ª–∞–µ–≤',
  '–ê–Ω–Ω–∞–ì—Ä–æ–º–æ–≤–∞',
  '–î–º–∏—Ç—Ä–∏–π–®—Ç–æ—Ä–º',
  '–ú–∞—Ä–∏—è–ü–æ–±–µ–¥–∞',
  '–û–ª–µ–≥–õ–∏–¥–µ—Ä',
  '–°–µ—Ä–≥–µ–π–ê—Ç–ª–µ—Ç',
  '–¢–∞—Ç—å—è–Ω–∞–°—Ç–∞–ª—å',
  '–ü–∞–≤–µ–ª–ß–µ–º–ø–∏–æ–Ω',
  '–ï–ª–µ–Ω–∞–î—Ä–∞–π–≤',
  '–ú–∞–∫—Å–∏–º–¢–∏—Ç–∞–Ω',
];

const mockTrainingDescribe = [
  '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∫–∞—Ä–¥–∏–æ-—Å–µ—Å—Å–∏—è –¥–ª—è —Å–∂–∏–≥–∞–Ω–∏—è –∂–∏—Ä–∞',
  '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å –≤ –ø–∞—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ',
  '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
  '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü',
  '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
  '–ë—ã—Å—Ç—Ä–∞—è 20-–º–∏–Ω—É—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã',
  '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏',
  '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–∏–ª–∞ + –∫–∞—Ä–¥–∏–æ',
  '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ –¥–ª—è –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
  '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
];

function getTraining(id: number): Training {
  return {
    id: id + 1,
    title: getRandomItem(mockTrainingTitle),
    image: `img/content/training-${getRandomValue(1, 4, 0)}.png`,
    level: getRandomEnumValue(TrainingLevel),
    type: getRandomEnumValue(TrainingType),
    duration: getRandomItem([...TRAINING_DURATIONS]),
    price: getRandomValue(0, 2000, 0),
    calories: getRandomValue(
      EntityConstrain.training.calories.minValue,
      EntityConstrain.training.calories.maxValue,
      0
    ),
    description: getRandomItem(mockTrainingDescribe),
    gender: getRandomEnumValue(UserGender),
    video: `video/content/training-${getRandomValue(1, 4, 0)}.mp4`,
    rating: getRandomValue(1, 5, 0),
    trainer: getRandomItem(mockTrainerName),
    isSpecial: getRandomItem([true, false]),
    createdAt: generateRandomDate(new Date(2024, 0, 1), new Date()),
  };
}

async function seedDb(prismaClient: PrismaClient) {
  const mockTrainings = Array.from({ length: 100 }, (_v, k) => getTraining(k));

  for (const training of mockTrainings) {
    await prismaClient.training.upsert({
      where: { id: training.id },
      update: {},
      create: training,
    });
  }

  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}

bootstrap();
