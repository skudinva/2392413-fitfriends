openapi: 3.0.0
paths:
  /api/users/register:
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: The new user has been successfully created.
        "409":
          description: User with the email already exists
      tags:
        - User API
  /api/users/update:
    patch:
      operationId: UsersController_update
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: The user password has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRdo"
        "401":
          description: Need authorization
        "404":
          description: User not found
      tags:
        - User API
      security:
        - accessToken: []
  /api/users/login:
    post:
      operationId: UsersController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserDto"
      responses:
        "200":
          description: User has been successfully logged.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggedUserRdo"
        "401":
          description: Password or Login is wrong.
      tags:
        - User API
  /api/users/{id}:
    get:
      operationId: UsersController_show
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRdo"
        "401":
          description: Need authorization
        "404":
          description: User not found
      tags:
        - User API
      security:
        - accessToken: []
  /api/users:
    get:
      operationId: UsersController_index
      parameters:
        - required: false
          name: types
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TrainingType"
        - required: false
          name: locations
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/LocationName"
        - required: false
          name: trainingLevel
          in: query
          schema:
            $ref: "#/components/schemas/TrainingLevel"
        - required: false
          name: role
          in: query
          schema:
            $ref: "#/components/schemas/UserRole"
        - description: readyForTraining
          required: false
          name: readyForTraining
          in: query
          schema:
            type: boolean
        - description: limit
          example: 6
          name: limit
          in: query
          required: true
          schema:
            type: number
        - name: sortDirection
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortDirection"
        - name: sortBy
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortType"
        - description: page
          example: 1
          name: page
          in: query
          required: true
          schema:
            default: 1
            type: number
        - description: userId
          required: false
          name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithPaginationRdo"
        "401":
          description: Need authorization
        "404":
          description: User not found
      tags:
        - User API
      security:
        - accessToken: []
  /api/users/refresh:
    post:
      operationId: UsersController_refreshToken
      parameters: []
      responses:
        "201":
          description: Get a new access/refresh tokens
      tags:
        - User API
      security:
        - refreshToken: []
  /api/users/check:
    post:
      operationId: UsersController_checkToken
      parameters: []
      responses:
        "201":
          description: User found
      tags:
        - User API
      security:
        - accessToken: []
  /api/trainings:
    post:
      operationId: TrainingController_createTraining
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateTrainingDto"
      responses:
        "201":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Training API
    get:
      operationId: TrainingController_getTrainings
      parameters:
        - description: limit
          example: 6
          name: limit
          in: query
          required: true
          schema:
            type: number
        - name: sortDirection
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortDirection"
        - required: false
          name: types
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TrainingType"
        - name: sortBy
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortType"
        - description: page
          example: 1
          name: page
          in: query
          required: true
          schema:
            default: 1
            type: number
        - description: minPrice
          required: true
          example: 100
          name: minPrice
          in: query
          schema:
            default: 0
            type: number
        - description: maxPrice
          required: true
          example: 10000
          name: maxPrice
          in: query
          schema:
            default: 10000
            type: number
        - description: minCalories
          required: true
          example: 1000
          name: minCalories
          in: query
          schema:
            default: 1000
            type: number
        - description: maxCalories
          required: true
          example: 5000
          name: maxCalories
          in: query
          schema:
            default: 5000
            type: number
        - description: minRating
          required: true
          example: 0
          name: minRating
          in: query
          schema:
            default: 0
            type: number
        - description: maxRating
          required: true
          example: 5
          name: maxRating
          in: query
          schema:
            default: 5
            type: number
        - description: Flag special training
          required: false
          name: isSpecial
          in: query
          schema:
            type: boolean
        - required: false
          name: durations
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TRAINING_DURATIONS"
      responses:
        "200":
          description: Trainings found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingWithPaginationRdo"
      security:
        - accessToken: []
      tags:
        - Training API
  /api/trainings/{id}:
    patch:
      operationId: TrainingController_updateTraining
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateTrainingDto"
      responses:
        "200":
          description: Training updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingRdo"
        "401":
          description: Need authorization
        "404":
          description: Training not found
        "409":
          description: AccessDeny
      security:
        - accessToken: []
      tags:
        - Training API
    delete:
      operationId: TrainingController_deleteTraining
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "204":
          description: Training deleted
        "401":
          description: Need authorization
        "404":
          description: Training not found
        "409":
          description: AccessDeny
      security:
        - accessToken: []
      tags:
        - Training API
    get:
      operationId: TrainingController_getTraining
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Training API
  /api/trainings/comments/{trainingId}:
    get:
      operationId: CommentController_getComments
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: number
        - name: sortDirection
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortDirection"
        - description: page
          example: 1
          name: page
          in: query
          required: true
          schema:
            default: 1
            type: number
      responses:
        "200":
          description: Successfully found comments of the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingCommentWithPaginationRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Comment API
    post:
      operationId: CommentController_createComment
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentDto"
      responses:
        "201":
          description: Successfully create comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingCommentRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Comment API
  /api/trainings/comments/{commentId}:
    delete:
      operationId: CommentController_deleteComment
      parameters:
        - name: commentId
          required: true
          in: path
          schema:
            type: number
      responses:
        "204":
          description: Successfully delete comment
        "404":
          description: Comment not found
        "409":
          description: You are not allowed to delete this comment
      security:
        - accessToken: []
      tags:
        - Comment API
  /api/orders:
    get:
      operationId: OrderController_getOrders
      parameters:
        - name: sortBy
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortType"
        - name: sortDirection
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortDirection"
        - description: page
          example: 1
          name: page
          in: query
          required: true
          schema:
            default: 1
            type: number
        - description: Только активные
          example: false
          required: false
          name: activeOnly
          in: query
          schema:
            default: false
            type: boolean
        - description: trainingId
          example: 52
          required: false
          name: trainingId
          in: query
          schema:
            default: 52
            type: number
      responses:
        "200":
          description: Successfully found orders of the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingOrderWithPaginationRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Order API
  /api/orders/{trainingId}:
    get:
      operationId: OrderController_getOrder
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Successfully found orders of the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingOrderRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Order API
    put:
      operationId: OrderController_updateTrainingState
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStateDto"
      responses:
        "200":
          description: Successfully found orders of the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingOrderRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Order API
    post:
      operationId: OrderController_createOrder
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderDto"
      responses:
        "201":
          description: Successfully create order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingOrderRdo"
        "404":
          description: Training not found
      security:
        - accessToken: []
      tags:
        - Order API
  /api/orders/{orderId}:
    delete:
      operationId: OrderController_deleteOrder
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: number
      responses:
        "204":
          description: Successfully delete order
        "404":
          description: Order not found
        "409":
          description: You are not allowed to delete this order
      security:
        - accessToken: []
      tags:
        - Order API
  /api/friends:
    get:
      operationId: FriendsController_getFriends
      parameters:
        - description: limit
          example: 6
          name: limit
          in: query
          required: true
          schema:
            type: number
        - name: sortDirection
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortDirection"
        - name: sortBy
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SortType"
        - description: page
          example: 1
          name: page
          in: query
          required: true
          schema:
            default: 1
            type: number
        - description: userId
          required: false
          name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Friend found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithPaginationRdo"
        "404":
          description: Friends not found
      tags:
        - Friend API
      security:
        - accessToken: []
  /api/friends/{friendId}:
    get:
      operationId: FriendsController_getFriendStatus
      parameters:
        - name: friendId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Friend status successful get
          content:
            application/json:
              schema:
                type: boolean
        "409":
          description: Some error
      tags:
        - Friend API
      security:
        - accessToken: []
    post:
      operationId: FriendsController_addFriend
      parameters:
        - name: friendId
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Friend successful added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRdo"
        "404":
          description: Friend not found
        "409":
          description: Some error
      tags:
        - Friend API
      security:
        - accessToken: []
    delete:
      operationId: FriendsController_deleteFriend
      parameters:
        - name: friendId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Friend successful deleted
        "404":
          description: Friend not found
        "409":
          description: Some error
      tags:
        - Friend API
      security:
        - accessToken: []
info:
  title: FitFriends app
  description: FitFriends app API
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    accessToken:
      scheme: Bearer
      bearerFormat: Bearer
      description: "[just text field] Please enter token in following format: Bearer "
      name: Authorization
      type: http
    refreshToken:
      scheme: Bearer
      bearerFormat: Bearer
      description: "[just text field] Please enter token in following format: Bearer "
      name: Authorization
      type: http
  schemas:
    LOCATIONS:
      type: string
      description: User Location
      enum:
        - Пионерская
        - Петроградская
        - Удельная
        - Звёздная
        - Спортивная
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          description: User unique address
          example: johndoe123@gmail.com
        password:
          type: string
          description: User password
          example: "123456"
        name:
          type: string
          description: User name
          example: Keks
        avatar:
          type: string
          description: User avatar
          format: binary
        gender:
          type: string
          description: User gender
          enum:
            - мужской
            - женский
            - неважно
        description:
          type: string
          description: User description
          example: ""
        location:
          example: Пионерская
          $ref: "#/components/schemas/LOCATIONS"
        birthday:
          format: date-time
          type: string
          description: User birthday
          example: "1981-10-11"
        role:
          type: string
          description: User role
          enum:
            - sportsman
            - coach
        readyForTraining:
          type: boolean
          description: readyForTraining
          default: false
      required:
        - email
        - password
        - name
        - avatar
        - gender
        - location
        - role
        - readyForTraining
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          description: User name
          example: Keks
        avatar:
          type: string
          description: User avatar
          format: binary
        gender:
          type: string
          description: User gender
          enum:
            - мужской
            - женский
            - неважно
        description:
          type: string
          description: User description
          example: ""
        location:
          example: Пионерская
          $ref: "#/components/schemas/LOCATIONS"
        birthday:
          format: date-time
          type: string
          description: User birthday
          example: "1981-10-11"
        role:
          type: string
          description: User role
          enum:
            - sportsman
            - coach
        readyForTraining:
          type: boolean
          description: readyForTraining
          default: false
    TrainingLevel:
      type: string
      description: User trainingLevel
      enum:
        - новичок
        - любитель
        - профессионал
    UserRole:
      type: string
      description: User role
      enum:
        - sportsman
        - coach
    TrainingType:
      type: string
      description: User trainingType
      enum:
        - йога
        - бег
        - бокс
        - стрейчинг
        - кроссфит
        - аэробика
        - пилатес
    UserRdo:
      type: object
      properties:
        id:
          type: string
          description: The uniq user ID
          example: 134ce8babd-cc30-4805-9b12-d9420398e7c5
        avatar:
          type: string
          description: User avatar path
          example: /images/user.png
        registerDate:
          format: date-time
          type: string
          description: User register date (ISO format)
          example: "1981-03-12"
        email:
          type: string
          description: User email
          example: user@user.local
        name:
          type: string
          description: User name
          example: Keks
        gender:
          type: string
          description: User gender
          enum:
            - мужской
            - женский
            - неважно
        birthday:
          format: date-time
          type: string
          description: User birthday
          example: "1981-10-11"
        description:
          type: string
          description: User avatar path
          example: /images/user.png
        location:
          type: string
          description: User Location
          example: Пионерская
        calories:
          type: number
          description: User calories
          example: 2300
        trainingLevel:
          example: новичок
          $ref: "#/components/schemas/TrainingLevel"
        role:
          example: sportsman
          $ref: "#/components/schemas/UserRole"
        trainingType:
          type: array
          items:
            $ref: "#/components/schemas/TrainingType"
        readyForTraining:
          type: boolean
          description: readyForTraining
          example: false
      required:
        - id
        - avatar
        - registerDate
        - email
        - name
        - gender
        - birthday
        - description
        - location
        - calories
        - trainingLevel
        - role
        - trainingType
        - readyForTraining
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
          description: User unique address
          example: johndoe123@gmail.com
        password:
          type: string
          description: User password
          example: "123456"
      required:
        - email
        - password
    LoggedUserRdo:
      type: object
      properties:
        id:
          type: string
          description: The uniq user ID
          example: 134ce8babd-cc30-4805-9b12-d9420398e7c5
        email:
          type: string
          description: User email
          example: user@user.local
        role:
          example: sportsman
          $ref: "#/components/schemas/UserRole"
        accessToken:
          type: string
          description: Access token
          example: user@user.local
        refreshToken:
          type: string
          description: Refresh token
      required:
        - id
        - email
        - role
        - accessToken
        - refreshToken
    LocationName:
      type: string
      description: Locations
      enum:
        - Пионерская
        - Петроградская
        - Удельная
        - Звёздная
        - Спортивная
    SortDirection:
      type: string
      description: sortDirection
      default: desc
      enum:
        - asc
        - desc
    SortType:
      type: string
      description: sortBy
      default: createdAt
      enum:
        - createdAt
        - rating
        - price
        - amount
        - totalPrice
    UserWithPaginationRdo:
      type: object
      properties:
        entities:
          description: users
          allOf:
            - $ref: "#/components/schemas/UserRdo"
        totalPages:
          type: number
          description: totalPages
          example: 10
        totalItems:
          type: number
          description: totalItems
          example: 100
        currentPage:
          type: number
          description: currentPage
          example: 1
        itemsPerPage:
          type: number
          description: itemsPerPage
          example: 5
      required:
        - entities
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
    TRAINING_DURATIONS:
      type: string
      description: Training duration
      enum:
        - 10-30 мин
        - 30-50 мин
        - 50-80 мин
        - 80-100 мин
    UserGender:
      type: string
      description: gender
      enum:
        - мужской
        - женский
        - неважно
    CreateTrainingDto:
      type: object
      properties:
        title:
          type: string
          description: Training title
          example: Boxing
        image:
          type: string
          description: Training image
          example: image01.png
        level:
          $ref: "#/components/schemas/TrainingLevel"
        type:
          $ref: "#/components/schemas/TrainingType"
        duration:
          example: 10-30 мин
          $ref: "#/components/schemas/TRAINING_DURATIONS"
        price:
          type: number
          description: Training price
          example: "500"
          minimum: 0
        calories:
          type: number
          description: Training calories
          example: "1000"
        description:
          type: string
          description: Training description
          example: >-
            Тренировка на фитболе — отличном тренажере для развития чувства
            баланса и равновесия, улучшения координации.
        gender:
          $ref: "#/components/schemas/UserGender"
        video:
          type: string
          description: Training video
          format: binary
        userId:
          type: string
          description: userId
          example: 63f4567890abcdef1234567d
        isSpecial:
          type: boolean
          description: Flag special training
      required:
        - title
        - image
        - level
        - type
        - duration
        - price
        - calories
        - description
        - gender
        - video
        - userId
        - isSpecial
    TrainingRdo:
      type: object
      properties:
        id:
          type: number
          description: Training id
          example: "1"
        title:
          type: string
          description: Training title
          example: Boxing
        image:
          type: string
          description: Training image
          example: image01.png
        level:
          $ref: "#/components/schemas/TrainingLevel"
        type:
          $ref: "#/components/schemas/TrainingType"
        duration:
          example: 10-30 мин
          $ref: "#/components/schemas/TRAINING_DURATIONS"
        price:
          type: number
          description: Training price
          example: "500"
          minimum: 0
        calories:
          type: number
          description: Training calories
          example: "1000"
        description:
          type: string
          description: Training description
          example: >-
            Тренировка на фитболе — отличном тренажере для развития чувства
            баланса и равновесия, улучшения координации.
        gender:
          $ref: "#/components/schemas/UserGender"
        video:
          type: string
          description: Training video
          format: binary
        rating:
          type: number
          description: Training rating
          default: 0
        userId:
          type: string
          description: userId
          example: 63f4567890abcdef1234567d
        isSpecial:
          type: boolean
          description: Flag special training
        specialPrice:
          type: number
          description: Training specialPrice
          example: "500"
          minimum: 0
        createdAt:
          format: date-time
          type: string
          description: Creation date
        userInfo:
          description: User info
          allOf:
            - $ref: "#/components/schemas/UserRdo"
      required:
        - id
        - title
        - image
        - level
        - type
        - duration
        - price
        - calories
        - description
        - gender
        - video
        - userId
        - isSpecial
        - specialPrice
        - createdAt
    UpdateTrainingDto:
      type: object
      properties:
        id:
          type: number
          description: Training id
          example: "1"
        title:
          type: string
          description: Training title
          example: Boxing
        image:
          type: string
          description: Training image
          example: image01.png
        level:
          $ref: "#/components/schemas/TrainingLevel"
        type:
          $ref: "#/components/schemas/TrainingType"
        duration:
          example: 10-30 мин
          $ref: "#/components/schemas/TRAINING_DURATIONS"
        price:
          type: number
          description: Training price
          example: "500"
          minimum: 0
        calories:
          type: number
          description: Training calories
          example: "1000"
        description:
          type: string
          description: Training description
          example: >-
            Тренировка на фитболе — отличном тренажере для развития чувства
            баланса и равновесия, улучшения координации.
        gender:
          $ref: "#/components/schemas/UserGender"
        video:
          type: string
          description: Training video
          format: binary
        userId:
          type: string
          description: userId
          example: 63f4567890abcdef1234567d
        isSpecial:
          type: boolean
          description: Flag special training
    TrainingWithPaginationRdo:
      type: object
      properties:
        entities:
          description: trainings
          allOf:
            - $ref: "#/components/schemas/TrainingRdo"
        totalPages:
          type: number
          description: totalPages
          example: 10
        totalItems:
          type: number
          description: totalItems
          example: 100
        currentPage:
          type: number
          description: currentPage
          example: 1
        itemsPerPage:
          type: number
          description: itemsPerPage
          example: 5
        maxPrice:
          type: number
          description: maxPrice
          example: 1000
      required:
        - entities
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
        - maxPrice
    TrainingCommentRdo:
      type: object
      properties:
        id:
          type: number
          description: ID comment
          example: "1"
        userId:
          type: string
          description: User Id
          example: 677cd8d75ff92067f1de5911
        trainingId:
          type: number
          description: ID of training
          example: "1"
        rating:
          type: number
          description: rating
          example: "5"
        message:
          type: string
          description: Comment message
          example: Some comment for post
        createdAt:
          format: date-time
          type: string
          description: Date of comment
          example: "2024-02-15T13:43:22+07:00"
        userInfo:
          description: User info
          allOf:
            - $ref: "#/components/schemas/UserRdo"
      required:
        - id
        - userId
        - trainingId
        - rating
        - message
        - createdAt
    TrainingCommentWithPaginationRdo:
      type: object
      properties:
        entities:
          description: comments
          allOf:
            - $ref: "#/components/schemas/TrainingCommentRdo"
        totalPages:
          type: number
          description: Total page count of selected entity
          example: 10
        currentPage:
          type: number
          description: Current page number
          example: 2
        totalItems:
          type: number
          description: Total items count of selected entity
          example: 50
        itemsPerPage:
          type: number
          description: Number of items on one page
          example: 20
      required:
        - entities
        - totalPages
        - currentPage
        - totalItems
        - itemsPerPage
    CreateCommentDto:
      type: object
      properties:
        userId:
          type: string
          description: User Id
          example: 677cd8d75ff92067f1de5911
        trainingId:
          type: number
          description: ID of training
          example: "1"
        rating:
          type: number
          description: rating
          example: "5"
        message:
          type: string
          description: Comment message
          example: Some comment for post
      required:
        - userId
        - trainingId
        - rating
        - message
    OrderType:
      type: string
      description: type
      enum:
        - абонемент
    PayType:
      type: string
      description: paymentType
      enum:
        - visa
        - mir
        - umoney
    TrainingOrderRdo:
      type: object
      properties:
        id:
          type: number
          description: ID order
          example: "1"
        type:
          example: абонемент
          $ref: "#/components/schemas/OrderType"
        trainingId:
          type: number
          description: Training id
          example: "1"
        userId:
          type: string
          description: userId
          example: 63f4567890abcdef1234567d
        price:
          type: number
          description: Training price
          example: "500"
          minimum: 0
        amount:
          type: number
          description: Training amount
          example: "1"
          minimum: 1
          maximum: 50
        totalPrice:
          type: number
          description: Training totalPrice
          example: "500"
          minimum: 0
        paymentType:
          example: mir
          $ref: "#/components/schemas/PayType"
        isStarted:
          type: boolean
          description: isStarted
          example: false
        doneCount:
          type: number
          description: doneCount
          example: 0
        isDone:
          type: boolean
          description: isDone
          example: false
        createdAt:
          format: date-time
          type: string
          description: Date of order
          example: "2024-02-15T13:43:22+07:00"
        training:
          description: Training info
          allOf:
            - $ref: "#/components/schemas/TrainingRdo"
      required:
        - id
        - type
        - trainingId
        - userId
        - price
        - amount
        - totalPrice
        - paymentType
        - isStarted
        - doneCount
        - isDone
        - createdAt
    TrainingOrderWithPaginationRdo:
      type: object
      properties:
        entities:
          description: orders
          allOf:
            - $ref: "#/components/schemas/TrainingOrderRdo"
        totalPages:
          type: number
          description: Total page count of selected entity
          example: 10
        currentPage:
          type: number
          description: Current page number
          example: 2
        totalItems:
          type: number
          description: Total items count of selected entity
          example: 50
        itemsPerPage:
          type: number
          description: Number of items on one page
          example: 20
      required:
        - entities
        - totalPages
        - currentPage
        - totalItems
        - itemsPerPage
    UpdateOrderStateDto:
      type: object
      properties:
        trainingId:
          type: number
          description: Training id
          example: "1"
        userId:
          type: string
          description: userId
          example: 63f4567890abcdef1234567d
        state:
          type: string
          description: state
          example: start
      required:
        - trainingId
        - userId
        - state
    CreateOrderDto:
      type: object
      properties:
        type:
          example: абонемент
          $ref: "#/components/schemas/OrderType"
        trainingId:
          type: number
          description: Training id
          example: "1"
        userId:
          type: string
          description: userId
          example: 63f4567890abcdef1234567d
        price:
          type: number
          description: Training price
          example: "500"
          minimum: 0
        amount:
          type: number
          description: Training amount
          example: "1"
          minimum: 1
          maximum: 50
        totalPrice:
          type: number
          description: Training totalPrice
          example: "500"
          minimum: 0
        paymentType:
          example: mir
          $ref: "#/components/schemas/PayType"
      required:
        - type
        - trainingId
        - userId
        - price
        - amount
        - totalPrice
        - paymentType
